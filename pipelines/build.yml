trigger:
  branches:
    include:
    - main
  paths:
    exclude:
    - README.md
    - .gitignore
    - pipelines

variables:
- name: artifact
  value: 'corporate-website'
- name: appDirectory
  value: 'app'
- name: infrastructureDirectory
  value: 'infrastructure'
- name: vmImageName
  value: 'ubuntu-latest'

pool:
  vmImage: $(vmImageName)

stages:
- stage: build
  displayName: Continous Integration
  jobs:
  - job: install_build_test
    displayName: Install, build and test
    steps:
    # Install Dependencies
    - task: Npm@1
      displayName: Installing project dependencies
      inputs:
        command: install
        workingDir: $(appDirectory)
    # Build Dependencies
    - task: Npm@1
      displayName: Building the application
      inputs:
        command: custom
        workingDir: $(appDirectory)
        customCommand: run-script build
    # Run Tests
    - task: Npm@1
      displayName:  Executing tests
      inputs:
        command: custom
        workingDir: $(appDirectory)
        customCommand: run-script test
    # Publishing test results to azure pipelines
    - task: PublishTestResults@2
      displayName: Publishing test results
      condition: succeededOrFailed()
      inputs:
        testResultsFiles: '$(appDirectory)/junit.xml'
    # Publishing code coverage to azure pipelines
    - task: PublishCodeCoverageResults@1
      displayName: Publishing test coverage results
      inputs:
        codeCoverageTool: Cobertura
        summaryFileLocation: $(System.DefaultWorkingDirectory)/$(appDirectory)/coverage/cobertura-coverage.xml
    # Publishing application build artifacts
    - task: PublishPipelineArtifact@1
      displayName: Publishing application artifacts
      inputs:
        targetPath: '$(appDirectory)'
        artifact: '$(artifact)-app'
        artifactType: 'pipeline'
    # Publishing infrastructure build artifacts
    - task: PublishPipelineArtifact@1
      displayName: Publishing infrastructure artifacts
      inputs:
        targetPath: '$(infrastructureDirectory)'
        artifact: '$(artifact)-infrastructure'
        artifactType: 'pipeline'