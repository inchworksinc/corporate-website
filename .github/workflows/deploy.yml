name: corporate-website-deploy
on:
  workflow_call:
    inputs:
      subscription:
        required: true
        description: Azure subscription for deployment.
        type: string
      template_file_path:
        required: true
        description: Path to bicep template to deploy infrastructure.
        type: string
      package:
        required: true
        description: Artifact path to deploy on webapp
        type: string
      slot_name:
        required: false
        description: Web app slot to deploy the Artifact
        type: string
        default: production
      build_id:
        required: true
        description: Run ID to download artifact from workflow
        type: string
      workload:
        required: true
        description: Busineed workload type
        type: string
      environment:
        required: true
        description: Environment to run this workflow
        type: string
      location:
        required: true
        description: Azure location to carry out deployment
        type: string
      instance_count:
        required: true
        description: Two digit instance count for azure resources
        type: string

env:
  EXPIRY_TIME: 10 minutes

jobs:
  deploy:
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    steps:
      - name: Downloading artifacts
        uses: dawidd6/action-download-artifact@v2
        with:
          workflow: build.yml
          run_id: ${{ inputs.build_id }}
      - name: Set environment variables
        run: |
            echo "expiry=`date -u -d "$EXPIRY_TIME" '+%Y-%m-%dT%H:%MZ'`" >> $GITHUB_ENV
            echo "resourceGroupName=`rg-${{ inputs.workload }}-${{ inputs.environment }}-${{ inputs.location }}-${{ inputs.instance_count }}`" >> $GITHUB_ENV
            echo "appName=`app-${{ inputs.workload }}-${{ inputs.environment }}-${{ inputs.location }}-${{ inputs.instance_count }}`" >> $GITHUB_ENV
            echo "storageAccountName=stcorpwebeastus2dev01" >> $GITHUB_ENV
            echo "containerName=`container-${{ inputs.workload }}-${{ inputs.environment }}-${{ inputs.location }}-${{ inputs.instance_count }}`" >> $GITHUB_ENV
      - name: Login to azure
        uses: azure/login@v1
        with:
          client-id: ${{ secrets.CLIENT_ID }}
          tenant-id: ${{ secrets.TENANT_ID }}
          subscription-id: ${{ secrets.SUBSCRIPTION_ID }}
      - name: Running preflight validation
        uses: azure/arm-deploy@v1
        with:
          #subscriptionId: ${{ inputs.subscription }}
          resourceGroupName: $resourceGroupName
          template: ${{ inputs.template_file_path }}
          parameters: environment=${{ inputs.environment }} workload=${{ inputs.workload }} deploymentIdentity=${{ secrets.CLIENT_ID }}
          deploymentmode: Validate
          scope: resourcegroup
      - name: Deploying azure infrastructure
        uses: azure/arm-deploy@v1
        with:
          #subscriptionId: ${{ inputs.subscription }}
          resourceGroupName: $resourceGroupName
          template: ${{ inputs.template_file_path }}
          parameters: environment=${{ inputs.environment }} workload=${{ inputs.workload }} deploymentIdentity=${{ secrets.CLIENT_ID }}
          deploymentmode: Incremental
          scope: resourcegroup
      # - name: Publishing code to webapp
      #   uses: azure/webapps-deploy@v2
      #   with:
      #     app-name: app-${{ inputs.workload }}-${{ inputs.environment }}-${{ inputs.location }}-${{ inputs.instance_count }}
      #     package: ${{ inputs.package }}
      #     slot-name: ${{ inputs.slot_name }}
      - name: Set SAS token expiration
        run: echo "expiry=`date -u -d "$EXPIRY_TIME" '+%Y-%m-%dT%H:%MZ'`" >> $GITHUB_ENV
      - name: Azure CLI script
        uses: azure/CLI@v1
        with:
          azcliversion: 2.19.1
          inlineScript: |
            az extension add --name webapp
            az storage account create -n $storageAccountName  -g $resourceGroupName -l ${{ inputs.location }}
            az storage container create -n $containerName --account-name $storageAccountName
            az storage blob upload --account-name $storageAccountName -c $containerName -f ${{ inputs.package }}
            APP_URL=$(az storage blob generate-sas --full-uri --permissions r --expiry $EXPIRY --account-name $storageAccountName -c $containerName -n app.zip | xargs)
            az rest --method PUT \
                    --uri https://management.azure.com/subscriptions/${{ secrets.SUBSCRIPTION_ID }}/resourceGroups/$resourceGroupName/providers/Microsoft.Web/sites/$appName/extensions/onedeploy?api-version=2020-12-01 \
                    --body '{ 
                        "properties": { 
                            "properties": {
                                "packageUri": "'"${APP_URL}"'"
                            }, 
                            "type": "zip",
                        }
                    }'   